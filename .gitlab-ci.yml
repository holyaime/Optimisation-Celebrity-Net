# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/pipeline/#customization
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
- quality_check
- test
- security
- build
- development
- production

variables:
  IMAGE_NAME: datakori/celebrity-ai
  IMAGE_TAG: v1.0.0
  LATEST: latest
  APPLICATION_NAME: celebrity-ai
  CONTAINER_PORT: 5000
  SERVER_PORT: 80
  DEV_SERVER_ADDRESS: http://165.22.194.104
  PROD_SERVER_ADDRESS: http://164.90.165.129

include:
  - project: 'DATAKORI/ops/ci-templates'
    file: 'pipeline.yml'

build_image:
  stage: build
  image: docker:26.0.0-rc2-cli

  services:
    - docker:26.0.0-rc2-dind

  variables:
    DOCKER_TLS_CERTDIR: "/certs"

  before_script:
    - echo $REGISTRY_ACCESS_KEY | docker login -u $REGISTRY_USER --password-stdin
    - cd ./celebrity_recognition_ai/app/

  script:
    # Docker Hub
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker tag $IMAGE_NAME:$IMAGE_TAG $IMAGE_NAME:$LATEST
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker push $IMAGE_NAME:$LATEST

  after_script:
    - docker logout

# deploy to yann
deploy-to-stage:
  image: alpine:latest
  stage: development
#  tags:
#      - deployment
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "echo $REGISTRY_ACCESS_KEY | docker login -u $REGISTRY_USER --password-stdin"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $IMAGE_NAME:$LATEST"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f $APPLICATION_NAME || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p $SERVER_PORT:$CONTAINER_PORT --name $APPLICATION_NAME $IMAGE_NAME:$LATEST"
  environment:
    name: development
    url: $DEV_SERVER_ADDRESS


# deploy to sankara
deploy-to-prod:

  image: alpine:latest
  stage: production
  script:
    - echo "Deploy to production server"
    - chmod og= $ID_RSA_PROD
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA_PROD -o StrictHostKeyChecking=no $SERVER_USER@$PROD_SERVER_IP "echo $REGISTRY_ACCESS_KEY | docker login -u $REGISTRY_USER --password-stdin"
    - ssh -i $ID_RSA_PROD -o StrictHostKeyChecking=no $SERVER_USER@$PROD_SERVER_IP "docker pull $IMAGE_NAME:$LATEST"
    - ssh -i $ID_RSA_PROD -o StrictHostKeyChecking=no $SERVER_USER@$PROD_SERVER_IP "docker container rm -f $APPLICATION_NAME || true"
    - ssh -i $ID_RSA_PROD -o StrictHostKeyChecking=no $SERVER_USER@$PROD_SERVER_IP "docker run -d -p $SERVER_PORT:$CONTAINER_PORT --name $APPLICATION_NAME $IMAGE_NAME:$LATEST"

  environment:
    name: production
    url: $PROD_SERVER_ADDRESS
  when: manual